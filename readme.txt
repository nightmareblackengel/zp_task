============================
Необходимо тестировать в googleChrome
(т.к. в других браузерах есть проблемы с позиционированием скрола)
============================
Описание:
============================
== Кроны
============================
1.  Контроллер  DelayMessageController
1.1     DelayMessageController::actionIndex
Отправка "отложенного сообщения" выполняется через backend.
Сохраняется информация о сообщении, которое должно отобразиться, и затем по Крону это сообщение будет добавлено в чат.
Алгоритм:
каждую секунду с 0-59 проверяются данные в Redis. Если сообщения есть в Redis - то они будут добавлены в указанный чат.
А в следующие 30 секунд, выбираются все старые сообщения, и происходит "сохранение старый сообщений"

1.2     DelayMessageController::actionCreateTest
предназначен для тестирования.
данный метод создает:
    - 2000 "отложенных сообщений" (для тестирование этого контроллера)

2.  MsgController
2.1     MsgController::actionDeleteBySettings
удаляет все старые сообщения пользователей, согласно настройкам каждого пользователя.
если у обоих пользователей одинаковый "Тип хранения истории" - то выбирается наибольшее значение.
если "Тип хранения истории" разный - то выбирается "по кол-ву сообщений".
во всех остальных случаях (даже когда у пользователя не указаны настройки) - выбирается "по кол-ву сообщений".
============================
== Хранилища
============================



============================
Технические тексты ошибок отображаются целенаправленно.
============================
Недостатки:
============================
Что еще можно реализовать:
============================
