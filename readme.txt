============================
Необходимо тестировать в googleChrome
(т.к. в других браузерах есть проблемы с позиционированием скрола)
============================
Описание:
============================
== Кроны
============================
1.  Контроллер  DelayMessageController
1.1     DelayMessageController::actionIndex
Отправка "отложенного сообщения" выполняется через backend.
Сохраняется информация о сообщении, которое должно отобразиться, и затем по Крону это сообщение будет добавлено в чат.
Алгоритм:
каждую секунду с 0-59 проверяются данные в Redis. Если сообщения есть в Redis - то они будут добавлены в указанный чат.
А в следующие 30 секунд, выбираются все старые сообщения, и происходит "сохранение старый сообщений"

1.2     DelayMessageController::actionCreateTest
предназначен для тестирования.
данный метод создает:
    - 2000 "отложенных сообщений" (для тестирование этого контроллера)

2.  MsgController
2.1     MsgController::actionDeleteBySettings
удаляет все старые сообщения пользователей, согласно настройкам каждого пользователя.
если у обоих пользователей одинаковый "Тип хранения истории" - то выбирается наибольшее значение.
если "Тип хранения истории" разный - то выбирается "по кол-ву сообщений".
во всех остальных случаях (даже когда у пользователя не указаны настройки) - выбирается "по кол-ву сообщений".

3.  TestController
3.1     TestController::actionCreateUsers
это тестовый контроллер, который позволяет создать тестовую информацию.
расчитывается рандомное кол-во чатов CN (это будут только каналы, т.к. много пользователей).
и для каждого чата создается рандомное кол-во пользователей (для каждого из них создается запись с рандомными настройками);
далее создается сам чат, и в него уже добавляются рандомное кол-во сообщений (1т-10т сообщений);
============================
== Хранилища
============================
Для реализации этой задачи я использовал два типа хранилища:
- Redis
    - структуры
        - сообщения из чата: структура (lists); ChatMessageQueueStorage
        - данные авторизации (sets); CookieStringStorage,
            - также данные, которые необходимы для возможности авторизации только одним пользователем; UserIdStringStorage
        - отложенные сообщения (sorted sets); DelayMsgSortedSetStorage
        - вспомогательные данные для Кронов (чтобы не запускались одновременно); CronCheckerForMsgRunStorage, CronCheckerForRunStorage
        - флеш-сообщения (alert-widget);
        - сессии;
        - даты последних сообщений в чате; ChatDateTimeMhashStorage
- Mysql
    - таблицы:
        чат; ChatModel
        пользователь; UserModel
        пользователи_чата; UserChatModel
        настройки пользователя. UserSettingsModel

==============================================
== Развёртывание проекта
1) в конфигах докера указать свои значения
1.1) название локального сайта прописать в /media/gb_work/projects/php/zp_task/docker/nginx/conf/ztt.loc.conf (в параметре server_name)

2) запустить команду для докера "docker-compose up -d"
2.1) зайти на страницу сайта
2.2) зайти в докер БазыДанных "msql8" и создать базу:
    # Команды в cmd
    > docker exec -it msql8 sh
    > mysql -u root -p
    # password: rO0tExample

    # Команды в mysql
    > CREATE DATABASE `ztt` CHARACTER SET = utf8mb4;
    > GRANT ALL PRIVILEGES ON *.* TO `jackson`@`%`
    > FLUSH PRIVILEGES;
2.3) инициализировать сайт
2.3.1) зайти в докер php "mphp" и запустить инициализацию для сайта
    # Команды в cmd
    > docker exec -it mphp sh
    > cd /var/www/html/ztt.loc
    > php init
        > выбрать Development (ввести 0)
        > ввести "yes"

2.3.2) внести правки в файлах *-local.php
    здесь /media/gb_work/projects/php/zp_task_test/common/config/main-local.php
    внести данные конфигурации
        'components' => [
            'db' => [
                'class' => \yii\db\Connection::class,
                'dsn' => 'mysql:host=172.18.0.102;dbname=ztt2',
                'username' => 'root',
                'password' => 'rO0tExample',
                'charset' => 'utf8',
            ],
            'cache' => [
                'class' => 'yii\caching\MemCache',
                'servers' => [
                    [
                        'host' => '172.18.0.104',
                        'port' => 11211,
                        'weight' => 100,
                    ],
                ],
                'useMemcached' => true,
            ],
2.3.3) запустить миграции коммандой docker exec -it mphp /var/www/html/ztt.loc/yii migrate/up

3) настроить кроны как написано здесь
(скопировать и настроить кроны для ОС)
пример файла /console/controllers/commands

============================
Технические тексты ошибок отображаются целенаправленно.
============================
Недостатки:
============================
Что еще можно реализовать:
============================
